name: 部署文档

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'packages/*/src/**'
      - 'src/**'
      - 'typedoc.json'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 安装依赖
        run: |
          echo "PNPM安装中..."
          pnpm install --no-frozen-lockfile
          
          # 安装webpack-cli全局和本地
          echo "安装webpack-cli..."
          npm install -g webpack-cli
          pnpm add -D webpack-cli
          
          # 为每个包添加webpack-cli
          for pkg in packages/*; do
            if [ -d "$pkg" ]; then
              echo "为 $pkg 安装webpack-cli"
              cd $pkg
              pnpm add -D webpack-cli
              cd ../..
            fi
          done
          
          echo "PNPM安装完成"

      - name: 修复模块引用
        run: |
          echo "修复模块引用路径..."
          
          # 创建临时脚本来修复引用路径
          cat > fix-imports.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const glob = require('glob');
          
          // 查找所有TypeScript文件
          const files = glob.sync('packages/*/src/**/*.{ts,tsx}');
          
          // 替换计数
          let replacementCount = 0;
          
          files.forEach(file => {
            const content = fs.readFileSync(file, 'utf8');
            
            // 替换 @taroviz/ 为 @agions/taroviz-
            const newContent = content.replace(/@taroviz\//g, '@agions/taroviz-');
            
            // 如果有变化，保存文件
            if (content !== newContent) {
              fs.writeFileSync(file, newContent);
              replacementCount++;
              console.log(`Fixed imports in: ${file}`);
            }
          });
          
          console.log(`总共修复了 ${replacementCount} 个文件的引用路径`);
          EOF
          
          # 安装glob用于文件查找
          npm install glob
          
          # 执行修复脚本
          node fix-imports.js

      - name: 构建所有包
        run: |
          echo "构建所有包..."
          # 确保所有包都能被相互引用
          pnpm -r exec -- mkdir -p dist
          echo "已创建临时dist目录"
          
          # 为每个包生成基本的package.json
          for pkg in packages/*; do
            if [ -d "$pkg" ]; then
              echo "处理包: $pkg"
              if [ -f "$pkg/package.json" ]; then
                # 确保每个包的dist目录中有基本package.json
                name=$(node -e "console.log(require('./$pkg/package.json').name)")
                echo "{\"name\":\"$name\",\"main\":\"index.js\",\"version\":\"1.0.2\"}" > $pkg/dist/package.json
                
                # 复制src目录到dist/src，以便TypeDoc可以找到源文件
                mkdir -p $pkg/dist/src
                cp -r $pkg/src/* $pkg/dist/src/ 2>/dev/null || :
                
                echo "已为 $pkg 创建临时package.json和源文件复制"
              fi
            fi
          done

      - name: 构建文档
        run: |
          echo "环境变量PATH: $PATH"
          echo "当前目录: $(pwd)"
          
          # 使用TS-Node直接运行TypeDoc，绕过包构建
          echo "安装ts-node和其他依赖..."
          npm install -g ts-node typescript glob typedoc
          
          # 使用自定义脚本生成文档
          cat > generate-docs.js << 'EOF'
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          
          // 从typedoc.json读取配置
          const typedocConfig = JSON.parse(fs.readFileSync('typedoc.json', 'utf8'));
          
          // 创建临时tsconfig
          const tsConfig = {
            "compilerOptions": {
              "baseUrl": ".",
              "paths": {
                "@agions/taroviz-core/*": ["packages/core/src/*"],
                "@agions/taroviz-charts/*": ["packages/charts/src/*"],
                "@agions/taroviz-themes/*": ["packages/themes/src/*"],
                "@agions/taroviz-data/*": ["packages/data/src/*"],
                "@agions/taroviz-hooks/*": ["packages/hooks/src/*"],
                "@agions/taroviz-adapters/*": ["packages/adapters/src/*"],
                "@agions/taroviz-core": ["packages/core/src"],
                "@agions/taroviz-charts": ["packages/charts/src"],
                "@agions/taroviz-themes": ["packages/themes/src"],
                "@agions/taroviz-data": ["packages/data/src"],
                "@agions/taroviz-hooks": ["packages/hooks/src"],
                "@agions/taroviz-adapters": ["packages/adapters/src"],
                "@agions/taroviz": ["packages/all/src"]
              },
              "module": "esnext",
              "target": "es6",
              "moduleResolution": "node",
              "jsx": "react",
              "skipLibCheck": true,
              "esModuleInterop": true,
              "resolveJsonModule": true,
              "allowSyntheticDefaultImports": true,
              "noEmit": true  // 不生成JS文件
            },
            "include": [
              "packages/*/src/**/*"
            ],
            "exclude": [
              "node_modules",
              "**/*.test.ts",
              "**/*.test.tsx",
              "**/__tests__/**"
            ]
          };
          
          // 写入临时tsconfig
          fs.writeFileSync('tsconfig.typedoc.json', JSON.stringify(tsConfig, null, 2));
          
          // 修改typedoc配置
          typedocConfig.out = "docs-api";
          typedocConfig.tsconfig = "tsconfig.typedoc.json";
          
          // 添加skipLibCheck选项
          typedocConfig.skipLibCheck = true;
          
          // 写入修改后的typedoc配置
          fs.writeFileSync('typedoc.temp.json', JSON.stringify(typedocConfig, null, 2));
          
          try {
            console.log('运行TypeDoc...');
            execSync('npx typedoc --options typedoc.temp.json --skipErrorChecking', { stdio: 'inherit' });
            console.log('TypeDoc文档生成成功!');
            
            // 准备部署目录
            console.log('准备部署文件...');
            if (!fs.existsSync('docs-dist')) {
              fs.mkdirSync('docs-dist', { recursive: true });
            }
            
            // 复制API文档
            if (fs.existsSync('docs-api')) {
              execSync('cp -r docs-api/* docs-dist/', { stdio: 'inherit' });
            }
            
            // 复制其他文档
            if (fs.existsSync('docs')) {
              execSync('mkdir -p docs-dist/guides', { stdio: 'inherit' });
              execSync('cp -r docs/* docs-dist/guides/', { stdio: 'inherit' });
            }
            
            // 复制README
            if (fs.existsSync('README.md')) {
              execSync('cp README.md docs-dist/', { stdio: 'inherit' });
            }
            
            console.log('文档准备完成!');
          } catch (error) {
            console.error('文档生成失败:', error);
            process.exit(1);
          } finally {
            // 清理临时文件
            try {
              fs.unlinkSync('typedoc.temp.json');
              fs.unlinkSync('tsconfig.typedoc.json');
            } catch (err) {}
          }
          EOF
          
          # 运行自定义脚本
          NODE_OPTIONS=--max-old-space-size=4096 node generate-docs.js

      - name: 部署到 GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs-dist
          branch: gh-pages
          clean: true 