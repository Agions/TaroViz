name: 部署文档

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'packages/*/src/**'
      - 'src/**'
      - 'typedoc.json'
      - '.github/workflows/docs.yml'
      - 'scripts/update-docs.js'
      - 'scripts/doc-fix.js'
      - 'scripts/fix-module-references.js'
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # 添加并发控制，避免多个文档部署工作流同时运行
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      # 添加依赖缓存
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            .pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 安装依赖
        run: |
          echo "PNPM安装中..."
          pnpm install
          
          # 确保文档相关依赖已安装
          pnpm add -D marked typedoc typedoc-plugin-markdown -w
          
          echo "PNPM安装完成"

      - name: 修复文档生成
        run: |
          echo "运行文档修复脚本..."
          node scripts/doc-fix.js
          echo "文档修复脚本执行完成"

      - name: 构建文档
        run: |
          echo "开始构建文档..."
          # 使用更新后的文档生成脚本
          NODE_OPTIONS=--max-old-space-size=8192 pnpm docs:build
          
          # 确保.nojekyll文件存在
          touch docs-dist/.nojekyll
          echo "确保.nojekyll文件存在"

      # 添加状态检查步骤
      - name: 检查文档生成状态
        id: check_docs
        run: |
          if [ -d "docs-dist" ] && [ "$(ls -A docs-dist)" ]; then
            echo "文档生成成功，准备部署..."
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "文档生成失败，放弃部署！"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 确保API文档存在
          if [ -d "docs-api" ] && [ -d "docs-dist/api" ]; then
            echo "API文档检查通过"
          else
            echo "警告：API文档可能缺失，但仍继续部署其他文档"
          fi

      - name: 部署到 GitHub Pages
        if: steps.check_docs.outputs.status == 'success'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs-dist
          branch: gh-pages
          clean: true
          force: true
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: 自动部署文档 [skip ci]"
          git-config-name: github-actions[bot]
          git-config-email: github-actions[bot]@users.noreply.github.com
          single-commit: true

      # 添加部署通知
      - name: 部署完成通知
        if: success()
        run: |
          echo "::notice::📚 文档已成功部署到 GitHub Pages! 访问 https://agions.github.io/taroviz/ 查看最新文档。"
          
      - name: 部署失败通知
        if: failure()
        run: |
          echo "::error::❌ 文档部署失败！请检查构建日志以获取更多信息。" 